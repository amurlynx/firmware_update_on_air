C51 COMPILER V9.03   HAL_NRF_HW                                                            09/08/2014 16:02:08 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE HAL_NRF_HW
OBJECT MODULE PLACED IN .\build\hal_nrf_hw.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24le1\hal_
                    -nrf_hw.c BROWSE INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24l01p;C:\Nordic Semiconductor\n
                    -RFgo SDK 2.3.0.10040\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\compiler\c51;C:\
                    -Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\compiler\common;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\sou
                    -rce_code\hal\) DEFINE(MCU_NRF24LE1) DEBUG OBJECTEXTEND PRINT(.\hal_nrf_hw.lst) OBJECT(.\build\hal_nrf_hw.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 2513 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of #hal_nrf_rw.
  16           *
  17           * @details #hal_nrf_rw is an SPI function which is hardware dependent. This file
  18           * contains an implementation for nRF24LE1.
  19           */
  20          
  21          #include <nrf24le1.h>
  22          #include <stdint.h>
  23          #include "hal_nrf.h"
  24          
  25          uint8_t hal_nrf_rw(uint8_t value)
  26          {
  27   1        SPIRDAT = value;
  28   1        while(!(SPIRSTAT & (uint8_t)0x02U)) // wait for byte transfer finished
  29   1        {
  30   2        }
  31   1        return SPIRDAT;             // return SPI read value
  32   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     10    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
