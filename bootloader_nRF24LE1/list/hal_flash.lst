C51 COMPILER V9.03   HAL_FLASH                                                             09/10/2014 13:47:25 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE HAL_FLASH
OBJECT MODULE PLACED IN .\build\hal_flash.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24le1\hal_
                    -flash.c OMF2 ROM(COMPACT) OPTIMIZE(9,SIZE) BROWSE MDU_R515 INCDIR(C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_c
                    -ode\hal\nrf24l01p;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\nrf24le1;C:\Nordic Semiconductor\nRFgo S
                    -DK 2.3.0.10040\source_code\compiler\c51;C:\Nordic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\compiler\common;C:\Nor
                    -dic Semiconductor\nRFgo SDK 2.3.0.10040\source_code\hal\) DEFINE(DEBUG_LED_) DEBUG PRINT(.\list\hal_flash.lst) OBJECT(.\
                    -build\hal_flash.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 133 $
  12           */ 
  13          
  14          /** @file
  15           *@brief Implementation of hal_flash
  16           */
  17          
  18          #include "nrf24le1.h"
  19          #include "hal_flash.h"
  20          
  21          void hal_flash_page_erase(uint8_t pn)
  22          { 
  23   1        // Save interrupt enable state and disable interrupts:
  24   1        F0 = EA;
  25   1        EA = 0;
  26   1      
  27   1        // Enable flash write operation:
  28   1        WEN = 1;
  29   1       
  30   1        // Write the page address to FCR to start the page erase operation. This
  31   1        // operation is "self timed" when executing from the flash; the CPU will
  32   1        // halt until the operation is finished:
  33   1        FCR = pn;
  34   1      
  35   1        // When running from XDATA RAM we need to wait for the operation to finish:
  36   1        while(RDYN == 1)
  37   1          ;
  38   1              
  39   1        WEN = 0;
  40   1        
  41   1        EA = F0; // Restore interrupt enable state  
  42   1      }
  43          
  44          void hal_flash_byte_write(uint16_t a, uint8_t b)
  45          {
  46   1        static uint8_t xdata *pb;
  47   1          
  48   1        // Save interrupt enable state and disable interrupts:
  49   1        F0 = EA;
  50   1        EA = 0;
C51 COMPILER V9.03   HAL_FLASH                                                             09/10/2014 13:47:25 PAGE 2   

  51   1        
  52   1        // Enable flash write operation:
  53   1        WEN = 1;
  54   1        
  55   1        // Write the byte directly to the flash. This operation is "self timed" when
  56   1        // executing from the flash; the CPU will halt until the operation is
  57   1        // finished:
  58   1        pb = (uint8_t xdata *)a;
  59   1        *pb = b; //lint -e613 "Null pointer ok here"
  60   1      
  61   1        // When running from XDATA RAM we need to wait for the operation to finish:
  62   1        while(RDYN == 1)
  63   1          ;
  64   1      
  65   1        WEN = 0;
  66   1      
  67   1        EA = F0; // Restore interrupt enable state
  68   1      }
  69          
  70          void hal_flash_bytes_write(uint16_t a, const uint8_t *p, uint16_t n)
  71          {
  72   1        static uint8_t xdata *pb;
  73   1      
  74   1        // Save interrupt enable state and disable interrupts:
  75   1        F0 = EA;
  76   1        EA = 0;
  77   1      
  78   1        // Enable flash write operation:
  79   1        WEN = 1;
  80   1      
  81   1        // Write the bytes directly to the flash. This operation is
  82   1        // "self timed"; the CPU will halt until the operation is
  83   1        // finished:
  84   1        pb = (uint8_t xdata *)a;
  85   1        while(n--)
  86   1        {
  87   2          *pb++ = *p++;
  88   2          //
  89   2          // When running from XDATA RAM we need to wait for the operation to
  90   2          // finish:
  91   2          while(RDYN == 1)
  92   2            ;
  93   2        }
  94   1      
  95   1        WEN = 0;
  96   1      
  97   1        EA = F0; // Restore interrupt enable state
  98   1      }
  99          
 100          uint8_t hal_flash_byte_read(uint16_t a)
 101          {
 102   1        uint8_t xdata *pb = (uint8_t xdata *)a;
 103   1        return *pb;
 104   1      }
 105          
 106          void hal_flash_bytes_read(uint16_t a, uint8_t *p, uint16_t n)
 107          {  
 108   1        uint8_t xdata *pb = (uint8_t xdata *)a;
 109   1        while(n--)
 110   1        {
 111   2          *p = *pb;
 112   2          pb++;
C51 COMPILER V9.03   HAL_FLASH                                                             09/10/2014 13:47:25 PAGE 3   

 113   2          p++;
 114   2        }
 115   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    156    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
